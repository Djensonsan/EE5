//This is a FSM-controlled application

#include "DualG2HighPowerMotorShield.h"
#include <Timer.h>
#include <avr/io.h>
#include <avr/interrupt.h>

#define max_speed 400
#define min_speed -400

#define Idle 57
#define Clean_motor 58
#define Cool_motor 59
#define Slow_end 61

#define COOL 98
#define CLEAN 99

#define threshold_temperature_up 25
#define threshold_temperature_down 24
#define clean_time 15000                                       //15 seconds
#define cool_time 15000                                        //15 seconds

int timer_counter = 0;                                         //counter to count time

const int prescale  = 1024;                                    //prescaler for TMR2
const int ocr2aval  = 15;                                      //counting interval for TMR2

const float iinterval = prescale * (ocr2aval + 1) / (F_CPU / 1.0e6);

int state;                                                    //state variable
int speed;
int temperature = A3;                                         //A3 as analog input to detect temperature
int power = 7;                                                //digital 7 as digital output to provide power for the temperature sensor

double buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};                  //buffer to store temperature value; //buffer to store temperature value
float avg_temperature;                                        //the avg temperature value used for control the motor


int previous_working_state;                                   //to record the previous working state for Slow_end to select which wshould be the next working state

Timer t;                                                     //this is the timer for sampling the temperature
DualG2HighPowerMotorShield18v22 md;                          //the motor we control


void setup() {

  Serial.begin(9600);                                       //setup serial
  while (!Serial) {                                         // wait for serial port to connect. Needed for Leonardo only
  }
  
  timmer_setting();                                         //set timmer2 to count 1uS
  initialize_variables();                                   //initialize all variables
}

void loop() {
  t.update();                                              //update the temperature interrupt
  switch (state) {
    case Idle:                                            //M2 doesn't work in Idle state

      /*transit criteria*/
      if (avg_temperature >= threshold_temperature_up)
      {
        Serial.println("In Idle state, going to Clean!");
        state = Clean_motor;
        timer_counter = 0;
      }
      break;
      
    

    case Clean_motor:
      clean_motor();
      /*transit criteria*/
      if ((timer_counter >= clean_time) || (avg_temperature < threshold_temperature_down))
      {
        Serial.println("In Clean, going to Slow_end");
        state = Slow_end;
        timer_counter = 0;
        previous_working_state = CLEAN;
      }
      else
      {
        state = Clean_motor;
      }
      break;

    case Slow_end:
      slow_end();
      /*transit criteria*/
      if (speed == 0)
      {
        if (avg_temperature < threshold_temperature_down)
        {
          state = Idle;
          timer_counter = 0;
          Serial.println("In Slow_end, going to Idle");
        }
        else
        {
          switch (previous_working_state)
          {
            case COOL:
              state = Clean_motor;
              timer_counter = 0;
              Serial.println("In Slow_end, going to Clean");
              break;
            case CLEAN:
              state = Cool_motor;
              timer_counter = 0;
              Serial.println("In Slow_end, going to Cool");
              break;
          }
        }
      }
      else
      {
        state = Slow_end;
      }
      break;

    case Cool_motor:
      cool_motor();
      /*transit criteria*/
      if ((timer_counter >= cool_time) || (avg_temperature < threshold_temperature_down))
      {
        state = Slow_end;
        timer_counter = 0;
        previous_working_state = COOL;
        Serial.println("In Cool, going to Slow_end");
      }
      else
      {
        state = Cool_motor;
      }
      break;


  }
}

/*******ISR For Timer 2 Compare-match overflow********/
volatile unsigned char value = 0;
ISR(TIMER2_COMPA_vect)
{
  timer_counter++;
}

/*************Functions used in Setup()**************/

//function to initialize the timmer2
void timmer_setting()
{
   cli();                                                   //disable global interrupts while initializing counter registers.
  TCCR2A = (1 << WGM21);                                   // Set Timer 2 CTC mode
  TCCR2B = 0b00000111;                                     // Set prescaler to 1024
  TIMSK2 = (1 << OCIE2A);                                  // Enable Compare-match register A interrupt for timer2
  OCR2A = ocr2aval;                                        // This value determines the interrupt interval
  sei();                                                   // Enable global interrupts
  }

//function to initialize all variables
void initialize_variables()
{
  timer_counter = 0;                                        //set timer_counter to 0

  state = Idle; //state variable initialized at Idle
  speed = 0;
  pinMode(power, OUTPUT);
  digitalWrite(power, LOW);                                //turn off the power of the temperature sensor

  t.every(5000, takeReading);                              //every 5 seconds read the temperature once

  md.init();                                               //initialize the motor
  md.calibrateCurrentOffsets();

  delay(10);
  md.enableDrivers();
  delay(1);                                                // The drivers require a maximum of 1ms to elapse when brought out of sleep mode.
}
/************************************************************/

/*####################################################################################*/
/**************************Functions for each state************************************/
/*####################################################################################*/

/***********************Clean_motor************************/
void clean_motor()                                        //called in Clean_motor state
{
  if (speed != max_speed)                                 //slow start
  {
    stopIfFault();
    md.setM2Speed(speed);
    if (timer_counter % 100 == 0)
    {
      speed++;
      Serial.print("Now is slow start for clean, speed = ");
      Serial.println(speed);
    }
  }
  else                                                    //keep run at the max_speed
  {
    md.setM2Speed(speed);
  }
}

/**********************Slow_end*********************************/
void slow_end()
{
  while (speed != 0)
  {
    if (speed > 0) {
      md.setM2Speed(speed);
      if (timer_counter % 50 == 0)
      {
        speed--;
      }
    }
    else if (speed < 0) {
      md.setM2Speed(speed);
      if (timer_counter % 50 == 0)
      {
        speed++;
      }
    }
  }
}

/************************Cool_motor*********************************/
void cool_motor()
{
  if (speed != min_speed)                                    //slow start
  {
    stopIfFault();
    md.setM2Speed(speed);
    if (timer_counter % 100 == 0)
    {
      speed--;
      Serial.print("Now is slow start for cool, speed = ");
      Serial.println(speed);
    }
  }
  else                                                     //keep run at the min_speed
  {
    md.setM2Speed(speed);
  }

}

/*###############################################################*/
/***************Functions for calculate temperature***************/
/*###############################################################*/

/************Calculate the Resistance*************/
float calculateR(double value)
{
  float resistance = 10000 * value / (1023 - value);
  return resistance;
}


/************Calculate the Temperature***********/
float calculateT(float resistor)
{
  float temp = log(resistor / 10000);
  temp = temp / 3435;
  temp = temp + 1 / (25 + 273.15);
  temp = 1 / temp;
  temp = temp - 273.15;
  return temp;
}

/*******function to sample the temperature*********/
void takeReading()                                          
{
  pinMode(power, OUTPUT);                                   //turn on the power
  digitalWrite(power, HIGH);
  delay(100);                                               //make the voltage stable

  for (int i = 0; i < 8; i++)
  {
    buffer[i] = analogRead(temperature);                    //sample the temperature
    delay(10);
  }

  digitalWrite(power, LOW);                                 //turn off the power

  float avg = 0;
  float r = 0;

                                                            //calculate the temperature and store it back in the buffer
  for (int i = 0; i < 8; i++)
  {
    buffer[i] = calculateT(calculateR(buffer[i]));
  }

  for (int i = 0; i < 8; i++)
  {
    avg = avg + buffer[i];
  }

  avg_temperature = avg / 8;
  Serial.println(state);
  Serial.print("Temperature is ");
  Serial.print(avg_temperature);
  Serial.println("Â°C");
}

/***********Function to detect error for the motor************/
void stopIfFault()
{
  if (md.getM2Fault())
  {
    md.disableDrivers();
    delay(1);
    Serial.println("M2 fault");
    while (1);
  }
}
