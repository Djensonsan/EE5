/**************************************************************************************************************
  demo: CAN-BUS Shield, receive data with interrupt mode, and set mask and filter
   when in interrupt mode, the data coming can't be too fast, must >20ms, or else you can use check mode
   Jansion, 2015-5-27
 ****************************************************************************************************************/
#include <SPI.h>
#include "df_can.h"
#include <SD.h>
#include<Wire.h>

const int MPU_addr = 0x68;
int16_t axis_X, axis_Y, axis_Z;
int minVal = 265;
int maxVal = 402;

float x;
float y;
float z;
float previous_x = 0;
float previous_z = 0;

union sensor_data_t
{
  float value;
  byte bytes[4];
};

sensor_data_t sensor_data_z;
sensor_data_t sensor_data_x;

const int SPI_CS_PIN = 10;
MCPCAN CAN(SPI_CS_PIN);                                    // Set CS pin
char  sd_cspin = 4; //pin 4 as spi_cs pin
File myFile;

void setup()
{
  Serial.begin(9600);

  Wire.setClock(400000);
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);

  int count = 50;                                     // the max numbers of initializint the CAN-BUS, if initialize failed first!.
  Serial.print("Initializing can controlor...");
  do {
    CAN.init();   //must initialize the Can interface here!
    CAN.init_Mask(MCP_RXM0, 0, 0x3ff);                         // there are 2 mask in mcp2515, you need to set both of them
    CAN.init_Mask(MCP_RXM1, 0, 0x3ff);
    /*
       set filter, we can receive id from 0x04 ~ 0x09 except for 0x06
       // there are 6 filter in mcp2515,so it can filter six id,i.e.0x04~0x09.
    */
    CAN.init_Filter(MCP_RXF0, 0, 0x04);                         // filter 0 for id = 0x04
    CAN.init_Filter(MCP_RXF1, 0, 0x05);                         // filter 1 for id = 0x05
    //CAN.init_Filter(MCP_RXF2, 0, 0x60);                         // filter 2 for id = 0x60
    CAN.init_Filter(MCP_RXF3, 0, 0x07);                         // filter 3 for id = 0x07
    CAN.init_Filter(MCP_RXF4, 0, 0x08);                         // filter 4 for id = 0x08
    CAN.init_Filter(MCP_RXF5, 0, 0x09);                         // filter 5 for id = 0x09
    if (CAN_OK == CAN.begin(CAN_500KBPS))                  // init can bus : baudrate = 500k
    {
      Serial.println("DFROBOT's CAN BUS Shield init ok!");
      break;
    }
    else
    {
      Serial.println("DFROBOT's CAN BUS Shield init fail");
      Serial.println("Please Init CAN BUS Shield again");

      delay(100);
      if (count <= 1)
        Serial.println("Please give up trying!, trying is useless!");
    }

  } while (count--);

  Serial.print("Initializing SD card...");

  if (!SD.begin(sd_cspin)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization success!");
  myFile = SD.open("Node0x60.txt", FILE_WRITE); //the file named Node0x60.txt use to save the data
  // with the frame id equeling 0x06.
  if (!myFile)
  {
    Serial.println("open Node0x60.text failed!");
  }
  else
  {
    Serial.println("open Node0x60.text success!");
  }
  /*
     set mask, set both the mask to 0x3ff
  */

}

void loop()
{
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true);

  axis_X = Wire.read() << 8 | Wire.read();
  axis_Y = Wire.read() << 8 | Wire.read();
  axis_Z = Wire.read() << 8 | Wire.read();

  int xAng = map(axis_X, minVal, maxVal, -90, 90);
  int yAng = map(axis_Y, minVal, maxVal, -90, 90);
  int zAng = map(axis_Z, minVal, maxVal, -90, 90);

  x = RAD_TO_DEG * (atan2(-yAng, -zAng) + PI);
  y = RAD_TO_DEG * (atan2(-xAng, -zAng) + PI);
  z = RAD_TO_DEG * (atan2(-yAng, -xAng) + PI);

  /*if ((z - previous_z > 5)||(previous_z-z > 5))
  {
    previous_z = z;
    sensor_data_z.value = z;
    Serial.println("z_axis");
    Serial.print(sensor_data_z.value);
    byte data_z[4] = {sensor_data_z.bytes[0], sensor_data_z.bytes[1], sensor_data_z.bytes[2], sensor_data_z.bytes[3]};
    CAN.sendMsgBuf(0x03, 0, 4, data_z);
  }*/
    if ((x - previous_x > 5)||(previous_x-x > 5))
  {
    previous_x = x;
    sensor_data_x.value = x;
    Serial.println("x_axis");
    Serial.println(sensor_data_x.value);
    byte data_x[4] = {sensor_data_x.bytes[0], sensor_data_x.bytes[1], sensor_data_x.bytes[2], sensor_data_x.bytes[3]};
    CAN.sendMsgBuf(0x01, 0, 4, data_x);
  }
}
