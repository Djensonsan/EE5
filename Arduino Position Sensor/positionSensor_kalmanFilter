#include <Kalman.h>
#include <SPI.h>
#include<Wire.h>
#include "MPU6050.h"

#define KAL 0
#define COM 1
#define DEGREE_DIFFERENCE 5
MPU6050 MPU;

const int MPU_addr = 0x68;

/*variables used for raw values */
int16_t arx, ary, arz, grx, gry, grz;
int minVal = 265;
int maxVal = 402;
float gyroScale = 131; //gyro scale factor from datasheet

/*variables used for angles read from accelerometers*/
float accX, accY, accZ;

/*variables used inside the complementary filter*/
float prev_gyrox;

/*variables used for display*/
float prevAngleX_Com, prevAngleX_Kal;

/*variables for the final angle*/
float compAngleX; // Calculated angle using a complementary filter
float kalAngleX; // Calculated angle using a Kalman filter

/*timer*/
double t;

Kalman kalmanX; // Create a Kalman instance



void setup()
{
  Serial.begin(9600);
  Wire.setClock(400000);
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B); //address of IMU
  Wire.write(0);
  Wire.endTransmission(true);
  prevAngleX_Com = 0;
  prevAngleX_Kal = 0;


  firstRead();                //take the first read
  kalmanX.setAngle(accX);     //Set starting angle for Kalman filter
  initializeComplementary();  //initialize the complementary filter
  t = millis();
}

void loop()
{
  //get the raw values from the accelerometer and gyroscope
  MPU.getMotion6(&arx, &ary, &arz, &grx, &gry, &grz);
  mapRawValues();

  //calculate dt
  double dt = (double)(millis() - t) / 1000;                                //time to integrate gyroscope output
  t = millis();

  //calculate angle using different filters
  kalAngleX = kalmanX.getAngle(accX, grx, dt);                              // Calculate the angle using a Kalman filter
  compAngleX = complementaryFilter(compAngleX, accX, grx, prev_gyrox, dt);  // Calculate the angle using a complementary filter

  //display the result when there is a difference bigger than 5
  showDifference(kalAngleX, KAL, DEGREE_DIFFERENCE);
  showDifference(compAngleX, COM, DEGREE_DIFFERENCE);

}

/***************************************Take the first read in setup***********************************************/
void firstRead()
{
  MPU.getMotion6(&arx, &ary, &arz, &grx, &gry, &grz); //get the raw values from the accelerometer and gyroscope
  mapRawValues();
}


/****************************************Initialize the complementary filter****************************************/
void initializeComplementary()
{
  compAngleX = accX;
  prev_gyrox = grx;
}

/**************************************************Map Raw values***************************************************/
void mapRawValues()
{
  int xAng = map(arx, minVal, maxVal, -90, 90);
  int yAng = map(ary, minVal, maxVal, -90, 90);
  int zAng = map(arz, minVal, maxVal, -90, 90);

  accX = RAD_TO_DEG * (atan2(-yAng, -zAng) + PI); //accelerometer euler angles

  grx = grx / gyroScale;                          //in degree/sec

}


/************************************************Complementary filter*************************************************/
float complementaryFilter(float lastAngle, float accX, float grx, float prev_grx, double dt)
{

  float gyroAngleX = lastAngle + (dt * 0.5 * (grx + prev_grx)); //integrate gyroscope reading to get angular displacement
  prev_gyrox = grx;                                             //update the latest angular speed

  float alpha = 0.98;                                           //filter coefficient
  float x = (alpha * gyroAngleX) + ((1 - alpha) * accX);        //(alpha * gyroX) + ((1-alpha)* accX);
  return x;
}


/******************************Only print out when there is difference*******************************************/
void showDifference(float value, int i, float difference) {
  if (i == 0)
  {
    if (abs(value - prevAngleX_Kal ) > difference  ) //send x-axis data over CAN bus
    {
      prevAngleX_Kal = value;
      Serial.print("Kalman filter x_axis ");
      Serial.println(value - 180);
    }
  }
  else
  {
    if (abs(value - prevAngleX_Com ) > difference  ) //send x-axis data over CAN bus
    {
      prevAngleX_Com = value;
      Serial.print("Complementary filter x_axis ");
      Serial.println(value - 180);
    }
  }

}
